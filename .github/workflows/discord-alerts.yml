name: CI + Discord Alerts

on:
  push:
    branches: ['**']
  pull_request:
    types: [opened, synchronize, closed]
  workflow_dispatch: {}

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run tests
        # ajuste esse comando se você usa outro runner/command (ex.: nos testes do seu repo)
        run: pytest -q

  notify:
    name: Notify Discord
    needs: test
    runs-on: ubuntu-latest
    if: always()        # executa mesmo se 'test' falhar
    env:
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }} # Lembre-se de ajustar o nome do secret se for diferente!
      REPO: ${{ github.repository }}
      REF: ${{ github.ref }}
      ACTOR: ${{ github.actor }}
      EVENT: ${{ github.event_name }}
      RUN_ID: ${{ github.run_id }}
      RESULT: ${{ needs.test.result }}
      PR_NUMBER: ${{ github.event.pull_request.number || '' }}
      PR_MERGED: ${{ github.event.pull_request.merged || false }}
    steps:
      - name: Setup Python (helper)
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Send Discord notification
        run: |
          RUN_URL="https://github.com/${REPO}/actions/runs/${RUN_ID}"
          STATUS="${RESULT}"
          if [ "${EVENT}" = "pull_request" ]; then
            TITLE="[PR ${PR_NUMBER}] ${REPO} (${REF}) by ${ACTOR}"
            if [ "${PR_MERGED}" = "true" ]; then
              TITLE="[PR MERGED] ${TITLE}"
            fi
          else
            TITLE="[${EVENT^^}] ${REPO} (${REF}) by ${ACTOR}"
          fi
          MESSAGE="${TITLE}\nStatus: ${STATUS}\nRun: ${RUN_URL}"
          echo "Sending message to Discord: $MESSAGE"
          # converte para JSON de forma segura e envia (não precisa de jq)
          echo "$MESSAGE" | python -c 'import sys,json; print(json.dumps({"content": sys.stdin.read()}))' | curl -s -H "Content-Type: application/json" -d @- "$DISCORD_WEBHOOK"

